"""
Modu≈Ç widget√≥w wynik√≥w
Zawiera komponenty do wy≈õwietlania wynik√≥w wyszukiwania nart
"""
from PyQt5.QtWidgets import (QWidget, QLabel, QScrollArea, QVBoxLayout, 
                             QHBoxLayout, QFrame, QPushButton, QTextBrowser)
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QFont, QPixmap

# ========== STA≈ÅE UI ==========
# Wymiary g≈Ç√≥wnych element√≥w
WYNIKI_WIDTH = 1100
WYNIKI_HEIGHT = 669
WYNIKI_POS = (0, 200)

class WynikiWidget(QWidget):
    """G≈Ç√≥wny widget wynik√≥w"""
    
    # Sygna≈Çy
    narta_wybrana = pyqtSignal(dict)
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        self.setup_connections()
    
    def setup_ui(self):
        """Tworzy UI wynik√≥w"""
        self.setObjectName("wyniki")
        self.setFixedSize(WYNIKI_WIDTH, WYNIKI_HEIGHT)
        self.setStyleSheet("""
            QWidget#wyniki {
                background: #194576;
                border-radius: 20px;
                border: none;
            }
        """)
        
        # Tytu≈Ç
        self.tytul = QLabel("WYNIKI WYSZUKIWANIA")
        self.tytul.setObjectName("tytul_wyniki")
        self.tytul.setFixedSize(400, 30)
        self.tytul.move(20, 20)
        self.tytul.setParent(self)
        self.tytul.setAlignment(Qt.AlignCenter)
        self.tytul.setStyleSheet("""
            QLabel#tytul_wyniki {
                color: #FFFFFF;
                font-size: 18px;
                font-weight: bold;
                background-color: transparent;
                border: none;
            }
        """)
        
        # Scroll area dla wynik√≥w
        self.scroll_area = QScrollArea()
        self.scroll_area.setObjectName("scroll_wyniki")
        self.scroll_area.setFixedSize(1060, 600)
        self.scroll_area.move(20, 60)
        self.scroll_area.setParent(self)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll_area.setStyleSheet("""
            QScrollArea#scroll_wyniki {
                background: transparent;
                border: none;
            }
            QScrollBar:vertical {
                background: #A6C2EF;
                width: 15px;
                border-radius: 7px;
            }
            QScrollBar::handle:vertical {
                background: #012B5A;
                border-radius: 7px;
                min-height: 20px;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
        """)
        
        # Kontener dla kart nart
        self.karty_container = QWidget()
        self.karty_container.setObjectName("karty_container")
        self.karty_container.setMinimumWidth(1040)
        
        # Layout dla kart
        self.karty_layout = QVBoxLayout(self.karty_container)
        self.karty_layout.setContentsMargins(10, 10, 10, 10)
        self.karty_layout.setSpacing(15)
        self.karty_layout.setAlignment(Qt.AlignTop)
        
        self.scroll_area.setWidget(self.karty_container)
        
        # Przycisk od≈õwie≈ºania
        self.refresh_button = QPushButton("üîÑ Od≈õwie≈º")
        self.refresh_button.setObjectName("refresh_button")
        self.refresh_button.setFixedSize(100, 30)
        self.refresh_button.move(980, 20)
        self.refresh_button.setParent(self)
        self.refresh_button.setStyleSheet("""
            QPushButton#refresh_button {
                background: #A6C2EF;
                border: 1px solid #FFFFFF;
                border-radius: 15px;
                color: #012B5A;
                font-size: 12px;
                font-weight: bold;
                padding: 5px 10px;
            }
            QPushButton#refresh_button:hover {
                background: #8BB0E8;
            }
            QPushButton#refresh_button:pressed {
                background: #6B9DE0;
            }
        """)
    
    def setup_connections(self):
        """Konfiguruje po≈ÇƒÖczenia sygna≈Ç√≥w"""
        self.refresh_button.clicked.connect(self._on_refresh_clicked)
    
    def _on_refresh_clicked(self):
        """Obs≈Çuguje klikniƒôcie przycisku od≈õwie≈ºania"""
        self.clear_results()
    
    def display_results(self, idealne, poziom_za_nisko, alternatywy, inna_plec, klient_data, rezerwacje_cache=None):
        """Wy≈õwietla wyniki wyszukiwania"""
        self.clear_results()
        
        # Importuj widget karty nart
        from .karty_nart_widgets import SkiCardWidget
        
        # IDEALNE DOPASOWANIA
        if idealne:
            self._add_section_header("‚úÖ IDEALNE DOPASOWANIA", len(idealne))
            for narta in idealne:
                card = SkiCardWidget(narta, klient_data, self.karty_container)
                card.clicked.connect(lambda checked, n=narta: self.narta_wybrana.emit(n))
                self.karty_layout.addWidget(card)
        
        # POZIOM ZA NISKO
        if poziom_za_nisko:
            self._add_section_header("üü° POZIOM ZA NISKO", len(poziom_za_nisko))
            for narta in poziom_za_nisko:
                card = SkiCardWidget(narta, klient_data, self.karty_container)
                card.clicked.connect(lambda checked, n=narta: self.narta_wybrana.emit(n))
                self.karty_layout.addWidget(card)
        
        # ALTERNATYWY
        if alternatywy:
            self._add_section_header("‚ö†Ô∏è ALTERNATYWY", len(alternatywy))
            for narta in alternatywy:
                card = SkiCardWidget(narta, klient_data, self.karty_container)
                card.clicked.connect(lambda checked, n=narta: self.narta_wybrana.emit(n))
                self.karty_layout.addWidget(card)
        
        # INNA P≈ÅEƒÜ
        if inna_plec:
            self._add_section_header("üë• INNA P≈ÅEƒÜ", len(inna_plec))
            for narta in inna_plec:
                card = SkiCardWidget(narta, klient_data, self.karty_container)
                card.clicked.connect(lambda checked, n=narta: self.narta_wybrana.emit(n))
                self.karty_layout.addWidget(card)
        
        # Brak wynik√≥w
        if not any([idealne, poziom_za_nisko, alternatywy, inna_plec]):
            self._add_no_results_message()
    
    def _add_section_header(self, title, count):
        """Dodaje nag≈Ç√≥wek sekcji"""
        header = QLabel(f"{title} ({count})")
        header.setObjectName("section_header")
        header.setFixedSize(1000, 25)
        header.setStyleSheet("""
            QLabel#section_header {
                color: #FFFFFF;
                font-size: 16px;
                font-weight: bold;
                background-color: transparent;
                border: none;
                margin: 10px 0 5px 0;
            }
        """)
        self.karty_layout.addWidget(header)
    
    def _add_no_results_message(self):
        """Dodaje komunikat o braku wynik√≥w"""
        message = QLabel("Brak dopasowanych nart dla podanych kryteri√≥w.")
        message.setObjectName("no_results")
        message.setFixedSize(1000, 30)
        message.setAlignment(Qt.AlignCenter)
        message.setStyleSheet("""
            QLabel#no_results {
                color: #B3B1B1;
                font-size: 14px;
                font-style: italic;
                background-color: transparent;
                border: none;
                margin: 20px 0;
            }
        """)
        self.karty_layout.addWidget(message)
    
    def clear_results(self):
        """Czy≈õci wyniki"""
        # Usu≈Ñ wszystkie widgety z layoutu
        while self.karty_layout.count():
            child = self.karty_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()
    
    def get_results_count(self):
        """Zwraca liczbƒô wy≈õwietlanych wynik√≥w"""
        return self.karty_layout.count()


class DetailedResultsWidget(QTextBrowser):
    """Widget do wy≈õwietlania szczeg√≥≈Çowych wynik√≥w w formacie HTML"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
    
    def setup_ui(self):
        """Konfiguruje widget szczeg√≥≈Çowych wynik√≥w"""
        self.setObjectName("detailed_results")
        self.setOpenExternalLinks(True)
        self.setStyleSheet("""
            QTextBrowser#detailed_results {
                background: transparent;
                border: none;
                font-family: Arial, Helvetica, sans-serif;
                font-size: 13px;
                color: #012B5A;
            }
        """)
        self.setMinimumHeight(120)
    
    def display_detailed_results(self, idealne, poziom_za_nisko, alternatywy, inna_plec, rezerwacje_cache=None):
        """Wy≈õwietla szczeg√≥≈Çowe wyniki w formacie HTML"""
        html = self._build_detailed_html(idealne, poziom_za_nisko, alternatywy, inna_plec, rezerwacje_cache)
        self.setHtml(html)
    
    def _build_detailed_html(self, idealne, poziom_za_nisko, alternatywy, inna_plec, rezerwacje_cache=None):
        """Buduje HTML szczeg√≥≈Çowych wynik√≥w"""
        html_parts = []
        
        # IDEALNE DOPASOWANIA
        if idealne:
            html_parts.append('<h3 style="color:#0b4da2; margin:10px 0 5px 0;">‚úÖ IDEALNE DOPASOWANIA:</h3>')
            html_parts.append('<div style="border:1px solid #ccc; padding:10px; margin:5px 0; background:#f9f9f9;">')
            for narta in idealne:
                html_parts.append(self._format_single_ski_detailed(narta, rezerwacje_cache))
            html_parts.append('</div>')
        
        # POZIOM ZA NISKO
        if poziom_za_nisko:
            html_parts.append('<h3 style="color:#1a73e8; margin:10px 0 5px 0;">üü° POZIOM ZA NISKO:</h3>')
            html_parts.append('<div style="border:1px solid #ccc; padding:10px; margin:5px 0; background:#f9f9f9;">')
            for narta in poziom_za_nisko:
                html_parts.append(self._format_single_ski_detailed(narta, rezerwacje_cache))
            html_parts.append('</div>')
        
        # ALTERNATYWY
        if alternatywy:
            html_parts.append('<h3 style="color:#0a5a9f; margin:10px 0 5px 0;">‚ö†Ô∏è ALTERNATYWY:</h3>')
            html_parts.append('<div style="border:1px solid #ccc; padding:10px; margin:5px 0; background:#f9f9f9;">')
            for narta in alternatywy:
                html_parts.append(self._format_single_ski_detailed(narta, rezerwacje_cache))
            html_parts.append('</div>')
        
        # INNA P≈ÅEƒÜ
        if inna_plec:
            html_parts.append('<h3 style="color:#666; margin:10px 0 5px 0;">üë• INNA P≈ÅEƒÜ:</h3>')
            html_parts.append('<div style="border:1px solid #ccc; padding:10px; margin:5px 0; background:#f9f9f9;">')
            for narta in inna_plec:
                html_parts.append(self._format_single_ski_detailed(narta, rezerwacje_cache))
            html_parts.append('</div>')
        
        if not any([idealne, poziom_za_nisko, alternatywy, inna_plec]):
            html_parts.append('<p style="text-align:center; color:#666; font-style:italic;">Brak dopasowanych nart dla podanych kryteri√≥w.</p>')
        
        return '<div style="font-family: Arial, Helvetica, sans-serif; font-size:13px; color:#012B5A;">' + ''.join(html_parts) + '</div>'
    
    def _format_single_ski_detailed(self, narta_info, rezerwacje_cache=None):
        """Formatuje pojedynczƒÖ nartƒô w formacie szczeg√≥≈Çowym"""
        try:
            dane = narta_info.get('dane', {})
            dopasowanie = narta_info.get('dopasowanie', {})
            wspolczynnik = narta_info.get('wspolczynnik_idealnosci', 0)
            
            # Podstawowe informacje
            marka = dane.get('MARKA', 'N/A')
            model = dane.get('MODEL', 'N/A')
            dlugosc = dane.get('DLUGOSC', 'N/A')
            
            # Emoji na podstawie wsp√≥≈Çczynnika
            if wspolczynnik >= 90:
                emoji = "üéØ"
            elif wspolczynnik >= 80:
                emoji = "‚úÖ"
            elif wspolczynnik >= 70:
                emoji = "üëç"
            elif wspolczynnik >= 60:
                emoji = "‚ö°"
            else:
                emoji = "üìä"
            
            # Sprawd≈∫ dostƒôpno≈õƒá
            dostepnosc = self._check_availability(marka, model, dlugosc, rezerwacje_cache)
            
            # Szczeg√≥≈Çowe dopasowanie
            dopasowanie_text = self._format_dopasowanie_details(dopasowanie)
            
            # Informacje techniczne
            promien = "12.5"  # TODO: Dodaƒá do bazy danych
            pod_butem = "85mm"  # TODO: Dodaƒá do bazy danych
            
            html = f"""
            <div style="margin:10px 0; padding:10px; border:1px solid #ddd; background:white; border-radius:5px;">
                <div style="font-weight:bold; font-size:14px; margin-bottom:5px;">
                    ‚ñ∫ {marka} {model} ({dlugosc} cm) {emoji} {wspolczynnik}%
                </div>
                <div style="margin:5px 0; font-size:12px;">
                    üì¶ Dostƒôpno≈õƒá: {dostepnosc}
                </div>
                <div style="margin:5px 0; font-size:12px;">
                    üìä Dopasowanie: {dopasowanie_text}
                </div>
                <div style="margin:5px 0; font-size:12px;">
                    ‚ÑπÔ∏è Promie≈Ñ: {promien} | Pod butem: {pod_butem}
                </div>
                <div style="margin:5px 0; font-size:12px;">
                    üìù Uwagi: 
                </div>
                <div style="border-top:1px solid #eee; margin-top:10px; padding-top:5px;">
                    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                </div>
            </div>
            """
            return html
        except Exception as e:
            return f"<div>B≈ÇƒÖd formatowania: {e}</div>"
    
    def _format_dopasowanie_details(self, dopasowanie):
        """Formatuje szczeg√≥≈Çy dopasowania"""
        try:
            parts = []
            
            # Poziom
            if 'poziom' in dopasowanie:
                p = dopasowanie['poziom']
                color = "üü¢" if p[0] == 'green' else "üü°" if p[0] == 'orange' else "üî¥"
                parts.append(f"{color} P:{p[2]}‚Üí{p[1]}")
            
            # P≈Çeƒá
            if 'plec' in dopasowanie:
                p = dopasowanie['plec']
                color = "üü¢" if p[0] == 'green' else "üü°" if p[0] == 'orange' else "üî¥"
                parts.append(f"{color} P≈Ç:{p[2]}‚Üí{p[1]}")
            
            # Waga
            if 'waga' in dopasowanie:
                p = dopasowanie['waga']
                color = "üü¢" if p[0] == 'green' else "üü°" if p[0] == 'orange' else "üî¥"
                if len(p) >= 4:
                    parts.append(f"{color} W:{p[2]}-{p[3]}‚Üí{p[1]}")
                else:
                    parts.append(f"{color} W:‚Üí{p[1]}")
            
            # Wzrost
            if 'wzrost' in dopasowanie:
                p = dopasowanie['wzrost']
                color = "üü¢" if p[0] == 'green' else "üü°" if p[0] == 'orange' else "üî¥"
                if len(p) >= 4:
                    parts.append(f"{color} Wz:{p[2]}-{p[3]}‚Üí{p[1]}")
                else:
                    parts.append(f"{color} Wz:‚Üí{p[1]}")
            
            # Przeznaczenie
            if 'przeznaczenie' in dopasowanie:
                p = dopasowanie['przeznaczenie']
                color = "üü¢" if p[0] == 'green' else "üü°" if p[0] == 'orange' else "üî¥"
                parts.append(f"{color} Pr:{p[2] if len(p) > 2 else ''}‚Üí{p[1]}")
            
            return " | ".join(parts)
        except Exception as e:
            return "B≈ÇƒÖd formatowania"
    
    def _check_availability(self, marka, model, dlugosc, rezerwacje_cache=None):
        """Sprawdza dostƒôpno≈õƒá nart na podstawie rezerwacji"""
        try:
            if rezerwacje_cache is None or rezerwacje_cache.empty:
                return "üü©1 üü©2"  # Domy≈õlnie dostƒôpne
            
            # Sprawd≈∫ czy narta jest zarezerwowana
            from src.dane.wczytywanie_danych import sprawdz_czy_narta_zarezerwowana
            is_reserved, reservation_info, numer = sprawdz_czy_narta_zarezerwowana(
                marka, model, dlugosc, None, None, rezerwacje_cache
            )
            
            if is_reserved:
                return f"üü©1 üî¥2<br/>üö´ Zarezerwowana: {reservation_info} (Nr: {numer})"
            else:
                return "üü©1 üü©2"
        except Exception as e:
            return "üü©1 üü©2"
